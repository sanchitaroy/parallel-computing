package WikiPageRank;


import java.io.IOException;

import java.math.BigDecimal;

import java.util.Iterator;

import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.mapred.MapReduceBase;
import org.apache.hadoop.mapred.OutputCollector;
import org.apache.hadoop.mapred.Reducer;
import org.apache.hadoop.mapred.Reporter;

/**
 * @author SRoy
 *
 */
public class RankCalculateReducer extends MapReduceBase implements Reducer<Text, Text, Text, Text> {

    private static double pgCount;
	public void configure(JobConf job){	   
		String name = job.get("NumberOfPages");
		pgCount = Double.valueOf(name);	   
   }
	
	private static final float damping = 0.85F; 
    
    public void reduce(Text page, Iterator<Text> values, OutputCollector<Text, Text> out, Reporter reporter) throws IOException {
    	
    	boolean isExistingWikiPage = false;
        String[] split;
        double shareOfOtherPages = 0;
        String links = "";
        String pageWithRank;
        
        // check control characters
        // calculate pageRank share <rank> / count(<links>)
        // add share to shareOfOtherPages
        while(values.hasNext()){
            pageWithRank = values.next().toString();
            
            if(pageWithRank.equals("!")) {
                isExistingWikiPage = true;
                continue;
            }
            
            if(pageWithRank.startsWith("|")){
                links = "\t"+pageWithRank.substring(1);
                continue;
            }

            split = pageWithRank.split("\\t");
            
            float pageRank = Float.valueOf(split[1]);
            int outlinkCount = Integer.valueOf(split[2]);
            
            shareOfOtherPages += (pageRank/outlinkCount);
        }

        if(!isExistingWikiPage) return;
        double newRank = damping * shareOfOtherPages + (1-damping)/pgCount;
        
        BigDecimal bd = new BigDecimal(newRank);
        String nRank = bd.toPlainString();
        out.collect(page, new Text(nRank + links));
    }
}
